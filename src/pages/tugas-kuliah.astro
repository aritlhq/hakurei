---
import Layout from "../layouts/Layout.astro";
import CourseTasks from "../components/CourseTasks.astro";
import coursesList from '../../data/tasks.json';

const allTaskModules = await import.meta.glob('../../data/tasks/*.json', {eager: true});

const courses = Array.isArray(coursesList) ? coursesList : coursesList.data;

const tasksByCourse = courses.map(course => {
    const taskFilePath = `../../data/tasks/${course.slug}.json`;
    const taskModule = allTaskModules[taskFilePath];

    return {
        courseName: course.courseName,
        weeklyTasks: taskModule && taskModule.default ? taskModule.default : []
    };
});
---
<Layout title="Tugas Kuliah | Hamba Kampus">
    <div class="pt-10">
        <div class="blur-reveal-container">
            <div class="py-4 text-center">
                <img src="/images/tugas_kuliah.png" alt="Tugas Kuliah"/>
            </div>

            <div class="mt-8 flex flex-col gap-2">
                {tasksByCourse.map((course, index) => (
                        <CourseTasks course={course} index={index}/>
                ))}
            </div>
        </div>
    </div>
</Layout>

<style is:global>
    .blur-reveal-container > div {
        opacity: 0;
        filter: blur(5px);
        animation-name: reveal;
        animation-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1);
        animation-fill-mode: forwards;
    }

    @keyframes reveal {
        from {
            opacity: 0;
            filter: blur(5px);
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            filter: blur(0);
            transform: translateY(0);
        }
    }
</style>

<script>
    const container = document.querySelector('.blur-reveal-container');
    if (container) {
        const children = container.children;
        const initialDelay = 0.5;
        const staggerDelay = 0.4;
        const baseDuration = 1;
        const durationIncrement = 0.5;
        for (let i = 0; i < children.length; i++) {
            const child = children[i];
            child.style.animationDelay = `${initialDelay + (i * staggerDelay)}s`;
            const currentDuration = baseDuration + (i * durationIncrement);
            child.style.animationDuration = `${currentDuration}s`;
        }
    }
</script>